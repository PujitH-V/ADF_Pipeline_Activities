{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "VVin"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
		},
		"SQL_LinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQL_LinkedService'"
		},
		"dbs_ls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dbs_ls'"
		},
		"salessrc_Linked_service_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'salessrc_Linked_service'"
		},
		"synapse_ls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse_ls'"
		},
		"salessrc_Linked_service_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://vvin.dfs.core.windows.net"
		},
		"Metadata_check_trigger_properties_General_activities_parameters_Folder": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"Metadata_check_trigger_properties_General_activities_parameters_File": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"Metadata_check_trigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/d28a783a-ff21-4fa6-a4df-0a8d9dd5e636/resourceGroups/storage/providers/Microsoft.Storage/storageAccounts/vvin"
		},
		"trumbling_trigger1_properties_pipeline_parameters_StartTime": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/General_activities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "customers_file_exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Wait_5 secs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "file_check_dataset",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.File",
										"type": "Expression"
									},
									"foldername": {
										"value": "@pipeline().parameters.Folder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"structure",
								"columnCount"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Wait_5 secs",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					}
				],
				"parameters": {
					"Folder": {
						"type": "string"
					},
					"File": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-20T18:13:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/file_check_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_all_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "All_Tables_Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Lookup_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy_Iterator",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "All_Tables_Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('All_Tables_Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Full_Load",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Full_Load_Src_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"schema": {
													"value": "@item().src_Schema",
													"type": "Expression"
												},
												"tablename": {
													"value": "@item().src_TableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Full_Load_Sink_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"Folder": {
													"value": "@concat('incremental/',item().ADLS_FolderName)",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().src_TableName,'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-22T07:11:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Lookup_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Full_Load_Src_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Full_Load_Sink_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquet_metadata_testing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "get_metadata_table_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"structure",
								"exists"
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-29T18:08:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/get_metadata_table_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/polybase_example')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data polybase",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "salessrc/ml-25m/genome-scores.csv"
							},
							{
								"name": "Destination",
								"value": "dbo.genome_scores"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "salessrc_Linked_service",
									"type": "LinkedServiceReference"
								},
								"path": "salessrc/incremental"
							},
							"enableSkipIncompatibleRow": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "salessrc_Linked_service",
										"type": "LinkedServiceReference"
									},
									"path": "salessink"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "movieId",
											"type": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "tagId",
											"type": "String"
										},
										"sink": {
											"name": "tagId",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "relevance",
											"type": "String"
										},
										"sink": {
											"name": "relevance",
											"type": "Single"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ml_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-30T05:06:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ml_ds')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/salessrc_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/testing_incr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Watermarktable_old_value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Incremental_testing_lookup_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Watermarktable_old_value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Watermarktable_old_value').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "tablename",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "conctaed_table_name",
										"value": {
											"value": "@concat(item().schema_nam,'.',item().TableName)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Watermarktable_new_value",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "tablename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select max(LastModifytime) as NewWaterMarkValue from ',variables('conctaed_table_name'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "watermark_new_value_dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Watermarktable_new_value",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from @{variables('conctaed_table_name')} where LastModifytime > '@{item().WatermarkValue}' and LastModifytime <= '@{activity('Watermarktable_new_value').output.firstRow.NewWatermarkvalue}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "temp_src_dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Incr_Copy_Sink_ds",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@concat(item().TableName,'/',item().TableName,'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@{activity('Watermarktable_new_value').output.firstRow.NewWatermarkvalue}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQL_LinkedService",
										"type": "LinkedServiceReference",
										"parameters": {
											"vvindb": "vvin",
											"testingdb": "testing"
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"conctaed_table_name": {
						"type": "String",
						"defaultValue": "xyz.table1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-29T17:49:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Incremental_testing_lookup_ds')]",
				"[concat(variables('factoryId'), '/datasets/watermark_new_value_dataset')]",
				"[concat(variables('factoryId'), '/datasets/temp_src_dataset')]",
				"[concat(variables('factoryId'), '/datasets/Incr_Copy_Sink_ds')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trumbling_window')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Watermarktable_old_value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Incremental_testing_lookup_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Watermarktable_old_value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Watermarktable_old_value').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "tablename",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "conctaed_table_name",
										"value": {
											"value": "@concat(item().schema_nam,'.',item().TableName)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Watermarktable_new_value",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "tablename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select max(LastModifytime) as NewWaterMarkValue from ',variables('conctaed_table_name'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "watermark_new_value_dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Watermarktable_new_value",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from data_source_table where LastModifytime > '@{item().WatermarkValue}' and LastModifytime <= '@{activity('Watermarktable_new_value').output.firstRow.NewWatermarkvalue}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "temp_src_dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "temp_sink_ds",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@concat(item().TableName,'/',item().Tablename,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@{activity('Watermarktable_new_value').output.firstRow.NewWatermarkvalue}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQL_LinkedService",
										"type": "LinkedServiceReference",
										"parameters": {
											"vvindb": "vvin",
											"testingdb": "testing"
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							]
						}
					}
				],
				"parameters": {
					"StartTime": {
						"type": "string"
					}
				},
				"variables": {
					"conctaed_table_name": {
						"type": "String",
						"defaultValue": "xyz.table1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-22T18:43:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Incremental_testing_lookup_ds')]",
				"[concat(variables('factoryId'), '/datasets/watermark_new_value_dataset')]",
				"[concat(variables('factoryId'), '/datasets/temp_src_dataset')]",
				"[concat(variables('factoryId'), '/datasets/temp_sink_ds')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalyticsTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "movieId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "tagId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "relevance",
						"type": "real",
						"precision": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "genome_scores"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full_Load_Sink_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "salessrc_Linked_service",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					},
					"File": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().File",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": "salessrc"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/salessrc_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full_Load_Src_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL_LinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incr_Copy_Sink_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "salessrc_Linked_service",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "incremental",
						"fileSystem": "salessrc"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/salessrc_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental_testing_lookup_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL_LinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"vvindb": "vvin",
						"testingdb": "testing"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "table_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "table_name",
						"type": "varchar"
					},
					{
						"name": "table_schema",
						"type": "varchar"
					},
					{
						"name": "last_load_start_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "last_load_end_timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL_LinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"vvindb": "vvin",
						"testingdb": "testing"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SubjectId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubjectName",
						"type": "nvarchar"
					},
					{
						"name": "src_Schema",
						"type": "nvarchar"
					},
					{
						"name": "src_TableName",
						"type": "nvarchar"
					},
					{
						"name": "ADLS_FolderName",
						"type": "nvarchar"
					},
					{
						"name": "Synapse_DW_Schema",
						"type": "nvarchar"
					},
					{
						"name": "Synapse_DW_TableName",
						"type": "nvarchar"
					},
					{
						"name": "LoadType",
						"type": "nvarchar"
					},
					{
						"name": "threshhold_datetime_value",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ADW_Copy_Lookup",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "metadata",
					"table": "lookup_master"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customers_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "salessrc_Linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customers.parquet",
						"folderPath": "incremental/Customers_ADLS_Stage1",
						"fileSystem": "salessrc"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_id",
						"type": "INT32"
					},
					{
						"name": "c_unique_id",
						"type": "UTF8"
					},
					{
						"name": "c_name",
						"type": "UTF8"
					},
					{
						"name": "Customer_Account_Created_Timestamp",
						"type": "INT96"
					},
					{
						"name": "customer_pincode",
						"type": "UTF8"
					},
					{
						"name": "customer_city",
						"type": "UTF8"
					},
					{
						"name": "customer_mobile_number",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/salessrc_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customers_sink_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "salessrc_Linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "salessink"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_id",
						"type": "INT32"
					},
					{
						"name": "c_unique_id",
						"type": "UTF8"
					},
					{
						"name": "c_name",
						"type": "UTF8"
					},
					{
						"name": "Customer_Account_Created_Timestamp",
						"type": "INT96"
					},
					{
						"name": "customer_pincode",
						"type": "UTF8"
					},
					{
						"name": "customer_city",
						"type": "UTF8"
					},
					{
						"name": "customer_mobile_number",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/salessrc_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customers_sink_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "salessrc_Linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "salessink"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/salessrc_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_check_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "salessrc_Linked_service",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"foldername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().foldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/salessrc_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_metadata_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "salessrc_Linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "data_source_table.parquet",
						"folderPath": "incremental/data_source_table",
						"fileSystem": "salessrc"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PersonID",
						"type": "INT32"
					},
					{
						"name": "Name",
						"type": "UTF8"
					},
					{
						"name": "LastModifytime",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/salessrc_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_metadata_table_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL_LinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"vvindb": "vvin",
						"testingdb": "testing"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "LastModifytime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "data_source_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incr_testing_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL_LinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"vvindb": "vvin",
						"testingdb": "testing"
					}
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					},
					"start_ts": {
						"type": "string"
					},
					"end_ts": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ml_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "salessrc_Linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "genome-scores.csv",
						"folderPath": "ml-25m",
						"fileSystem": "salessrc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "tagId",
						"type": "String"
					},
					{
						"name": "relevance",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/salessrc_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/orders_parquet_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "salessrc_Linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "orders.parquet",
						"folderPath": "incremental/orders_ADLS_Stage1",
						"fileSystem": "salessrc"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "or_id",
						"type": "INT32"
					},
					{
						"name": "order_unique_id",
						"type": "UTF8"
					},
					{
						"name": "customer_unique_id",
						"type": "UTF8"
					},
					{
						"name": "product_id",
						"type": "INT32"
					},
					{
						"name": "order_units",
						"type": "INT32"
					},
					{
						"name": "order_received_timestamp",
						"type": "INT96"
					},
					{
						"name": "order_status",
						"type": "UTF8"
					},
					{
						"name": "payment_id",
						"type": "UTF8"
					},
					{
						"name": "Discount_Applied",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/salessrc_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/temp_sink_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "salessrc_Linked_service",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "incremental",
						"fileSystem": "salessrc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/salessrc_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/temp_src_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL_LinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"vvindb": "vvin",
						"testingdb": "testing"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "data_source_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/watermark_new_value_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL_LinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_LinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"vvindb": {
						"type": "string",
						"defaultValue": "vvin"
					},
					"testingdb": {
						"type": "string",
						"defaultValue": "testing"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQL_LinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbs_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('dbs_ls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/salessrc_Linked_service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('salessrc_Linked_service_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('salessrc_Linked_service_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/synapse_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('synapse_ls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Metadata_check_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "General_activities",
							"type": "PipelineReference"
						},
						"parameters": {
							"Folder": "[parameters('Metadata_check_trigger_properties_General_activities_parameters_Folder')]",
							"File": "[parameters('Metadata_check_trigger_properties_General_activities_parameters_File')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/salessrc/blobs/incremental",
					"blobPathEndsWith": ".parquet",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Metadata_check_trigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/General_activities')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trumbling_Window_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2021-06-22T23:25:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-0.01:00:00"
						}
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trumbling_trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "trumbling_window",
						"type": "PipelineReference"
					},
					"parameters": {
						"StartTime": "[parameters('trumbling_trigger1_properties_pipeline_parameters_StartTime')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2021-06-22T18:06:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-0.00:05:00"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/trumbling_window')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customers_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customers_parquet",
								"type": "DatasetReference"
							},
							"name": "customers"
						},
						{
							"dataset": {
								"referenceName": "orders_parquet_dataset",
								"type": "DatasetReference"
							},
							"name": "orders"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "customers_sink_ds",
								"type": "DatasetReference"
							},
							"name": "sinkToADLSGen2"
						}
					],
					"transformations": [
						{
							"name": "customersJoin"
						},
						{
							"name": "AggregateOrders"
						},
						{
							"name": "customersSelect"
						}
					],
					"script": "source(output(\n\t\tc_id as integer,\n\t\tc_unique_id as string,\n\t\tc_name as string,\n\t\tCustomer_Account_Created_Timestamp as timestamp,\n\t\tcustomer_pincode as string,\n\t\tcustomer_city as string,\n\t\tcustomer_mobile_number as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['/incremental/Customers_ADLS_Stage1','incremental_moved/Customers'],\n\tformat: 'parquet') ~> customers\nsource(output(\n\t\tor_id as integer,\n\t\torder_unique_id as string,\n\t\tcustomer_unique_id as string,\n\t\tproduct_id as integer,\n\t\torder_units as integer,\n\t\torder_received_timestamp as timestamp,\n\t\torder_status as string,\n\t\tpayment_id as string,\n\t\tDiscount_Applied as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['incremental/orders_ADLS_Stage1','incremental_moved/Orders'],\n\tformat: 'parquet') ~> orders\ncustomers, orders join(c_unique_id == customer_unique_id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> customersJoin\ncustomersJoin aggregate(groupBy(c_id,\n\t\tc_unique_id,\n\t\tc_name,\n\t\tcustomer_pincode),\n\tor_id = count(or_id)) ~> AggregateOrders\nAggregateOrders select(mapColumn(\n\t\tc_id,\n\t\tc_unique_id,\n\t\tc_name,\n\t\tcustomer_pincode,\n\t\tor_id\n\t),\n\tpartitionBy('hash', 2,\n\t\tc_unique_id\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> customersSelect\ncustomersSelect sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tsaveOrder: 1) ~> sinkToADLSGen2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/customers_parquet')]",
				"[concat(variables('factoryId'), '/datasets/orders_parquet_dataset')]",
				"[concat(variables('factoryId'), '/datasets/customers_sink_ds')]"
			]
		}
	]
}